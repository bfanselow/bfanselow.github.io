{"version":3,"sources":["auth/hooks/useUpdatePassword.ts","admin/pages/ProfilePassword.tsx"],"names":["updatePassword","async","oldPassword","newPassword","_ref","data","axios","put","ProfilePassword","snackbar","useSnackbar","t","useTranslation","isUpdating","isLoading","mutateAsync","useMutation","useUpdatePassword","formik","useFormik","initialValues","confirmPassword","validationSchema","Yup","min","size","required","oneOf","onSubmit","values","handleUpdatePassword","then","resetForm","success","catch","error","_jsx","handleSubmit","noValidate","children","_jsxs","Card","CardHeader","title","CardContent","TextField","margin","fullWidth","name","label","type","id","autoComplete","disabled","value","onChange","handleChange","touched","Boolean","errors","helperText","CardActions","LoadingButton","loading","variant"],"mappings":"+OAGA,MAAMA,EAAiBC,UAMhB,IANuB,YAC5BC,EAAW,YACXC,GAIDC,EACC,MAAM,KAAEC,SAAeC,IAAMC,IAAI,gBAAiB,CAChDL,cACAC,gBAEF,OAAOE,G,oBC2GMG,UA7GSA,KACtB,MAAMC,EAAWC,eACX,EAAEC,GAAMC,eAER,WAAEC,EAAU,eAAEb,GDCf,WACL,MAAM,UAAEc,EAAS,YAAEC,GAAgBC,YAAYhB,GAC/C,MAAO,CAAEa,WAAYC,EAAWd,eAAgBe,GCHTE,GAEjCC,EAASC,YAAU,CACvBC,cAAe,CACblB,YAAa,GACbC,YAAa,GACbkB,gBAAiB,IAEnBC,iBAAkBC,IAAW,CAC3BrB,YAAaqB,MACVC,IAAI,EAAGb,EAAE,yBAA0B,CAAEc,KAAM,KAC3CC,SAASf,EAAE,gCACdR,YAAaoB,MACVC,IAAI,EAAGb,EAAE,yBAA0B,CAAEc,KAAM,KAC3CC,SAASf,EAAE,gCACdU,gBAAiBE,MACdI,MAAM,CAACJ,IAAQ,gBAAiBZ,EAAE,qCAClCe,SAASf,EAAE,kCAEhBiB,SAAWC,GACTC,EAAqBD,EAAO3B,YAAa2B,EAAO1B,eAG9C2B,EAAuB7B,MAC3BC,EACAC,KAEAH,EAAe,CAAEE,cAAaC,gBAC3B4B,MAAK,KACJb,EAAOc,YACPvB,EAASwB,QAAQtB,EAAE,6CAEpBuB,OAAM,KACLzB,EAAS0B,MAAMxB,EAAE,0CAIvB,OACEyB,cAAA,QAAMR,SAAUV,EAAOmB,aAAcC,YAAU,EAAAC,SAC7CC,eAACC,IAAI,CAAAF,SAAA,CACHH,cAACM,IAAU,CAACC,MAAOhC,EAAE,4BACrB6B,eAACI,IAAW,CAAAL,SAAA,CACVH,cAACS,IAAS,CACRC,OAAO,SACPpB,UAAQ,EACRqB,WAAS,EACTC,KAAK,cACLC,MAAOtC,EAAE,uCACTuC,KAAK,WACLC,GAAG,cACHC,aAAa,mBACbC,SAAUxC,EACVyC,MAAOpC,EAAOW,OAAO3B,YACrBqD,SAAUrC,EAAOsC,aACjBrB,MACEjB,EAAOuC,QAAQvD,aAAewD,QAAQxC,EAAOyC,OAAOzD,aAEtD0D,WAAY1C,EAAOuC,QAAQvD,aAAegB,EAAOyC,OAAOzD,cAE1DkC,cAACS,IAAS,CACRC,OAAO,SACPpB,UAAQ,EACRqB,WAAS,EACTC,KAAK,cACLC,MAAOtC,EAAE,mCACTuC,KAAK,WACLC,GAAG,cACHE,SAAUxC,EACVyC,MAAOpC,EAAOW,OAAO1B,YACrBoD,SAAUrC,EAAOsC,aACjBrB,MACEjB,EAAOuC,QAAQtD,aAAeuD,QAAQxC,EAAOyC,OAAOxD,aAEtDyD,WAAY1C,EAAOuC,QAAQtD,aAAee,EAAOyC,OAAOxD,cAE1DiC,cAACS,IAAS,CACRC,OAAO,SACPpB,UAAQ,EACRqB,WAAS,EACTC,KAAK,kBACLC,MAAOtC,EAAE,uCACTuC,KAAK,WACLC,GAAG,kBACHE,SAAUxC,EACVyC,MAAOpC,EAAOW,OAAOR,gBACrBkC,SAAUrC,EAAOsC,aACjBrB,MACEjB,EAAOuC,QAAQpC,iBACfqC,QAAQxC,EAAOyC,OAAOtC,iBAExBuC,WACE1C,EAAOuC,QAAQpC,iBAAmBH,EAAOyC,OAAOtC,qBAItDe,cAACyB,IAAW,CAAAtB,SACVH,cAAC0B,IAAa,CAACZ,KAAK,SAASa,QAASlD,EAAYmD,QAAQ,YAAWzB,SAClE5B,EAAE","file":"static/js/50.c4d7ef2a.chunk.js","sourcesContent":["import axios from \"axios\";\nimport { useMutation } from \"react-query\";\n\nconst updatePassword = async ({\n  oldPassword,\n  newPassword,\n}: {\n  oldPassword: string;\n  newPassword: string;\n}) => {\n  const { data } = await axios.put(\"/api/password\", {\n    oldPassword,\n    newPassword,\n  });\n  return data;\n};\n\nexport function useUpdatePassword() {\n  const { isLoading, mutateAsync } = useMutation(updatePassword);\n  return { isUpdating: isLoading, updatePassword: mutateAsync };\n}\n","import Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport TextField from \"@material-ui/core/TextField\";\nimport LoadingButton from \"@material-ui/lab/LoadingButton\";\nimport { useFormik } from \"formik\";\nimport { useTranslation } from \"react-i18next\";\nimport * as Yup from \"yup\";\nimport { useUpdatePassword } from \"../../auth/hooks/useUpdatePassword\";\nimport { useSnackbar } from \"../../core/contexts/SnackbarProvider\";\n\nconst ProfilePassword = () => {\n  const snackbar = useSnackbar();\n  const { t } = useTranslation();\n\n  const { isUpdating, updatePassword } = useUpdatePassword();\n\n  const formik = useFormik({\n    initialValues: {\n      oldPassword: \"\",\n      newPassword: \"\",\n      confirmPassword: \"\",\n    },\n    validationSchema: Yup.object({\n      oldPassword: Yup.string()\n        .min(8, t(\"common.validations.min\", { size: 8 }))\n        .required(t(\"common.validations.required\")),\n      newPassword: Yup.string()\n        .min(8, t(\"common.validations.min\", { size: 8 }))\n        .required(t(\"common.validations.required\")),\n      confirmPassword: Yup.string()\n        .oneOf([Yup.ref(\"newPassword\")], t(\"common.validations.passwordMatch\"))\n        .required(t(\"common.validations.required\")),\n    }),\n    onSubmit: (values) =>\n      handleUpdatePassword(values.oldPassword, values.newPassword),\n  });\n\n  const handleUpdatePassword = async (\n    oldPassword: string,\n    newPassword: string\n  ) => {\n    updatePassword({ oldPassword, newPassword })\n      .then(() => {\n        formik.resetForm();\n        snackbar.success(t(\"profile.notifications.passwordChanged\"));\n      })\n      .catch(() => {\n        snackbar.error(t(\"common.errors.unexpected.subTitle\"));\n      });\n  };\n\n  return (\n    <form onSubmit={formik.handleSubmit} noValidate>\n      <Card>\n        <CardHeader title={t(\"profile.password.title\")} />\n        <CardContent>\n          <TextField\n            margin=\"normal\"\n            required\n            fullWidth\n            name=\"oldPassword\"\n            label={t(\"profile.password.form.current.label\")}\n            type=\"password\"\n            id=\"oldPassword\"\n            autoComplete=\"current-password\"\n            disabled={isUpdating}\n            value={formik.values.oldPassword}\n            onChange={formik.handleChange}\n            error={\n              formik.touched.oldPassword && Boolean(formik.errors.oldPassword)\n            }\n            helperText={formik.touched.oldPassword && formik.errors.oldPassword}\n          />\n          <TextField\n            margin=\"normal\"\n            required\n            fullWidth\n            name=\"newPassword\"\n            label={t(\"profile.password.form.new.label\")}\n            type=\"password\"\n            id=\"newPassword\"\n            disabled={isUpdating}\n            value={formik.values.newPassword}\n            onChange={formik.handleChange}\n            error={\n              formik.touched.newPassword && Boolean(formik.errors.newPassword)\n            }\n            helperText={formik.touched.newPassword && formik.errors.newPassword}\n          />\n          <TextField\n            margin=\"normal\"\n            required\n            fullWidth\n            name=\"confirmPassword\"\n            label={t(\"profile.password.form.confirm.label\")}\n            type=\"password\"\n            id=\"confirmPassword\"\n            disabled={isUpdating}\n            value={formik.values.confirmPassword}\n            onChange={formik.handleChange}\n            error={\n              formik.touched.confirmPassword &&\n              Boolean(formik.errors.confirmPassword)\n            }\n            helperText={\n              formik.touched.confirmPassword && formik.errors.confirmPassword\n            }\n          />\n        </CardContent>\n        <CardActions>\n          <LoadingButton type=\"submit\" loading={isUpdating} variant=\"contained\">\n            {t(\"common.update\")}\n          </LoadingButton>\n        </CardActions>\n      </Card>\n    </form>\n  );\n};\n\nexport default ProfilePassword;\n"],"sourceRoot":""}